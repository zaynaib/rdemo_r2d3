#create labels for the frequency table
month(chi_bikes$date, label=TRUE) %>% table()
#create a variable called month and lable the months
chi_bikes$month <- month(chi_bikes$date,label=TRUE)
#create a bar graph with the plot
ggplot(chi_bikes,aes(month)) + geom_bar()
#do the same thing for weekday
chi_bikes$wday <- wday(chi_bikes$date, label = TRUE) +xlab("weekday")
ggplot(chi_bikes,aes(wday)) + geom_bar()
#use lubridate to work with dates in the dataset
chi_bikes <- chi_bikes %>% mutate(date = ymd_hms(`Start Time`))
chi_bikes %>%
group_by(month(date))
#frequency table
chi_bikes %>% group_by(month(date)) %>% summarise(freq = n())
month(chi_bikes$date) %>% table()
#create labels for the frequency table
month(chi_bikes$date, label=TRUE) %>% table()
#create a variable called month and lable the months
chi_bikes$month <- month(chi_bikes$date,label=TRUE)
#create a bar graph with the plot
ggplot(chi_bikes,aes(month)) + geom_bar()
#do the same thing for weekday
chi_bikes$wday <- wday(chi_bikes$date, label = TRUE)
ggplot(chi_bikes,aes(wday)) + geom_bar()
ggplot(chi_bikes,aes(wday)) + geom_bar() + xlab("weekday")
ggplot(chi_bikes,aes(wday)) + geom_bar() + xlab("weekday") + title ("Chicago weekday rides")
ggplot(chi_bikes,aes(wday)) + geom_bar() + xlab("weekday") + title ("Chicago weekday rides")
ggplot(chi_bikes,aes(wday)) + geom_bar() + xlab("weekday") + title("Chicago weekday rides")
ggplot(chi_bikes,aes(wday)) + geom_bar() + xlab("weekday")
ggplot(chi_bikes,aes(wday)) + geom_bar() +  ggtitle("Plot of length \n by dose") + xlab("weekday")
ggplot(chi_bikes,aes(wday)) + geom_bar() +  ggtitle("Chicago Weekday Rideship counts") + xlab("weekday")
View(new_york)
View(washington)
setwd("C:/Users/mutiu/Desktop/project/rPractice/rUdacity/bikeanalysis")
library(tidyverse)
library(lubridate)
#orginal dataset
chicago <- read_csv("chicago.csv")
new_york <- read_csv("new-york-city.csv")
washington <- read_csv("washington.csv")
#create a new dataset that I can mutate
chi_bikes <- rename(chicago,ID = X1)
nyc_bikes <- rename(new_york,ID = X1)
wash_bikes <- rename(washington,ID = X1)
#use lubridate to work with dates in the dataset
chi_bikes <- chi_bikes %>% mutate(date = ymd_hms(`Start Time`))
chi_bikes %>%
group_by(month(date))
#frequency table
chi_bikes %>% group_by(month(date)) %>% summarise(freq = n())
month(chi_bikes$date) %>% table()
#create labels for the frequency table
month(chi_bikes$date, label=TRUE) %>% table()
#create a variable called month and lable the months
chi_bikes$month <- month(chi_bikes$date,label=TRUE)
#create a bar graph with the plot
ggplot(chi_bikes,aes(month)) + geom_bar()
#do the same thing for weekday
chi_bikes$wday <- wday(chi_bikes$date, label = TRUE)
ggplot(chi_bikes,aes(wday)) + geom_bar() +  ggtitle("Chicago Weekday Rideship counts") + xlab("weekday")
nyc_bikes <- nyc_bikes %>% mutate(date = ymd_hms(`Start Time`))
nyc_bikes %>%
group_by(month(date))
#create labels for the frequency table
month(nyc_bikes$date, label=TRUE) %>% table()
#create a variable called month and lable the months
nyc_bikes$month <- month(nyc_bikes$date,label=TRUE)
#create a bar graph with the plot
ggplot(nyc_bikes,aes(month)) + geom_bar()
#do the same thing for weekday
nyc_bikes$wday <- wday(nyc_bikes$date, label = TRUE)
ggplot(nyc_bikes,aes(wday)) + geom_bar() +  ggtitle("New York Weekday Rideship counts") + xlab("weekday")
wash_bikes <- wash_bikes %>% mutate(date = ymd_hms(`Start Time`))
wash_bikes %>%
group_by(month(date))
#frequency table
month(wash_bikes$date, label=TRUE) %>% table()
#create a variable called month and lable the months
wash_bikes$month <- month(wash_bikes$date,label=TRUE)
#create a bar graph with the plot
ggplot(wash_bikes,aes(month)) + geom_bar()
#do the same thing for weekday
wash_bikes$wday <- wday(wash_bikes$date, label = TRUE)
ggplot(wash_bikes,aes(wday)) + geom_bar() +  ggtitle("Washington Weekday Rideship counts") + xlab("weekday")
#2a
chi_bikes %>% count(`Start Station`,sort=TRUE)
#2b
chi_bikes %>% count(`End Station`, sort= TRUE)
#2c
#What is the most common trip from start to end (i.e., most frequent combination of start station and end station)?
chi_bikes %>% group_by(`Start Station`, `End Station`) %>% count(sort=TRUE)
#2a
wash_bikes %>% count(`Start Station`,sort=TRUE)
#2b
wash_bikes %>% count(`End Station`, sort= TRUE)
#2c
#What is the most common trip from start to end (i.e., most frequent combination of start station and end station)?
wash_bikes %>% group_by(`Start Station`, `End Station`) %>% count(sort=TRUE)
#2a
nyc_bikes %>% count(`Start Station`,sort=TRUE)
#2b
nyc_bikes %>% count(`End Station`, sort= TRUE)
#2c
#What is the most common trip from start to end (i.e., most frequent combination of start station and end station)?
nyc_bikes %>% group_by(`Start Station`, `End Station`) %>% count(sort=TRUE)
chi_bikes %>%summarise(sum(`Trip Duration`)/3600)
chi_bikes %>%summarise(mean(`Trip Duration`)/60)
#What are the counts of each user type?
chi_bikes %>% count(`User Type`,sort=TRUE)
#What are the counts of each gender (only available for NYC and Chicago)?
chi_bikes %>% count(`Gender`, sort = TRUE)
#What are the earliest, most recent, most common year of birth (only available for NYC and Chicago)?
chi_bikes %>% na.omit %>% summarise(min(`Birth Year`))
chi_bikes %>% na.omit %>% summarise(max(`Birth Year`))
chi_bikes %>% group_by(`Birth Year`) %>% count(sort=TRUE)
#1989 is the most common year
#What are the counts of each user type?
nyc_bikes %>% count(`User Type`,sort=TRUE)
#What are the counts of each gender (only available for NYC and Chicago)?
nyc_bikes %>% count(`Gender`, sort = TRUE)
#What are the earliest, most recent, most common year of birth (only available for NYC and Chicago)?
nyc_bikes %>% na.omit %>% summarise(min(`Birth Year`))
nyc_bikes %>% na.omit %>% summarise(max(`Birth Year`))
nyc_bikes %>% group_by(`Birth Year`) %>% count(sort=TRUE)
#What are the counts of each user type?
wash_bikes %>% count(`User Type`,sort=TRUE)
#What are the counts of each gender (only available for NYC and Chicago)?
wash_bikes %>% count(`Gender`, sort = TRUE)
wash_bikes %>% group_by(`Start Station`, `End Station`) %>% count(sort=TRUE)
#What are the counts of each user type?
wash_bikes %>% count(`User Type`,sort=TRUE)
chi_bikes$hour <- wday(chi_bikes$hour, label = TRUE)
chi_bikes$hour <- hour(chi_bikes$date, label = TRUE)
install.package("pagedown")
install.packages("pagedown")
knitr::opts_chunk$set(echo = TRUE)
chi_duration <- ggplot(aes(x=trip_duration/60),data=chi_bikes) + geom_histogram() +  scale_x_continuous(limits=c(1,25)) + xlab("Trip Duration Minutes") + ggtitle("Chicago Bike Trips in Minutes")
install.packages("kableExtra")
devtools::install_github("haozhu233/kableExtra")
getwd()
install.packages(c("AsioHeaders", "backports", "bookdown", "broom", "callr", "chron", "classInt", "cli", "covr", "crosstalk", "dbplyr", "devtools", "diffobj", "digest", "dplyr", "DT", "ellipsis", "forcats", "fs", "gdtools", "gganimate", "ggplot2", "git2r", "glue", "haven", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "kableExtra", "knitr", "later", "lifecycle", "lubridate", "maptools", "mime", "mnormt", "modelr", "openssl", "pagedown", "pillar", "pkgbuild", "pkgload", "plyr", "processx", "promises", "ps", "psych", "purrr", "Rcpp", "remotes", "reshape2", "rex", "rgdal", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "rversions", "rvest", "scales", "servr", "shiny", "sp", "stringi", "sys", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "units", "usethis", "uuid", "vctrs", "vdiffr", "websocket", "withr", "xfun", "xml2", "xmlparsedata", "yaml"))
R.version.string
library(installr)
library(stringr)
library(stringr)
library(installr)
updateR()
updateR()
install.packages("rtweet")
library(rtweet)
token <- create_token("R21!Me", "J2Ky1kJQ0YJmv1vnu4HBiSDIc", "q2ezMfbOfSe55mh2U1W0dGw6VbKmwxevPYm5RcJYJUxnW87nqk")
token <- create_token("R21!Me", "J2Ky1kJQ0YJmv1vnu4HBiSDIc", "q2ezMfbOfSe55mh2U1W0dGw6VbKmwxevPYm5RcJYJUxnW87nqk")
2 + 7
install.packages("tidytuesdayR")
install.packages("tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2021-02-16')
georgia_pop <- tuesdata$georgia_pop
freed_slaves <- tuesdata$freed_slaves
View(freed_slaves)
mean(freed_slaves$Slave)
mean(freed_slaves$Free)
census <- tuesdata$census
View(census)
View(census)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("waffle")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("showtext")
install.packages("glue")
install.packages("glue")
library(tidyverse)
library(tidytuesdayR)
library(waffle)
library(glue)
library(showtext)
tuesdata <- tidytuesdayR::tt_load('2021-02-16')
georgia_pop <- tuesdata$georgia_pop
freed_slaves <- tuesdata$freed_slaves
census <- tuesdata$census
font_add_google("Oswald", "Oswald")
showtext_auto()
enslaved_df <- census %>%
filter(region == "USA Total") %>%
select(year, black_free, black_slaves
)
enslaved_df <- census %>%
filter(region == "USA Total")
View(census)
enslaved_df <- census
enslaved_df %>% filter(region == "USA Total")
enslaved_df$region
enslaved_df %>% filter(enslaved_df$region == "USA Total")
enslaved_df %>% filter(region == "USA Total")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
enslaved_df <- census %>%
filter(region == "USA Total")
library(dplyr)
library(dplyr)
enslaved_df <- census %>%
filter(region == "USA Total")
enslaved_df
enslaved_df %>% select(year, black_free, black_slaves)
enslaved_df %>%   pivot_longer(cols=startsWith("black_"), names_to="type",)
library(tidyverse)
enslaved_df %>%   pivot_longer(cols=startsWith("black_"), names_to="type",)
enslaved_df %>% pivot_longer(cols=starts_with("black_"), names_to="type",)
library(tidyverse)
library(tidytuesdayR)
library(waffle)
library(glue)
library(showtext)
tuesdata <- tidytuesdayR::tt_load('2021-02-16')
georgia_pop <- tuesdata$georgia_pop
freed_slaves <- tuesdata$freed_slaves
census <- tuesdata$census
font_add_google("Oswald", "Oswald")
showtext_auto()
enslaved_df <- census %>%
filter(region == "USA Total") %>%
select(year, black_free, black_slaves) %>%
pivot_longer(cols=starts_with("black_"), names_to="type",) %>%
glimpse()
ggplot(enslaved_df, aes(values = count/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE) +
facet_wrap(~year, nrow=1,strip.position = "bottom") +
scale_fill_manual(
name= NULL,
values = c("#00aa00","#000000"),
labels = c("Enslaved","Freed")
)
remotes::install_github("hrbrmstr/waffle")
ggplot(enslaved_df, aes(values = count/10000, fill=type)
;
ggplot(enslaved_df, aes(values = count/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE)
install.packages("waffle", repos = "https://cinc.rud.is")
install.packages("waffle", repos = "https://cinc.rud.is")
ggplot(enslaved_df, aes(values = count/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE)
library(tidyverse)
library(tidytuesdayR)
library(waffle)
library(glue)
library(showtext)
tuesdata <- tidytuesdayR::tt_load('2021-02-16')
georgia_pop <- tuesdata$georgia_pop
freed_slaves <- tuesdata$freed_slaves
census <- tuesdata$census
font_add_google("Oswald", "Oswald")
showtext_auto()
enslaved_df <- census %>%
filter(region == "USA Total") %>%
select(year, black_free, black_slaves) %>%
pivot_longer(cols=starts_with("black_"), names_to="type",) %>%
glimpse()
ggplot(enslaved_df, aes(values = count/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE)
ggplot(enslaved_df, aes(values = value/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE)
ggplot(enslaved_df, aes(values = value/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE) +
facet_wrap(~year, nrow=1,strip.position = "bottom") +
scale_fill_manual(
name= NULL,
values = c("#00aa00","#000000"),
labels = c("Enslaved","Freed")
)
ggplot(enslaved_df, aes(values = value/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE) +
facet_wrap(~year, nrow=1,strip.position = "bottom") +
scale_fill_manual(
name= NULL,
values = c("#00aa00","#000000"),
labels = c("Enslaved","Freed")
) +
scale_y_discrete(expand = c(0,0)) +
coord_equal()+
labs(
title = "Proportion of Freed and Persons Among Blacks in the USA",
subtitle = glue(
"Each Square Represents 10,000 Person That Are "
), fill = "Each Square Represents 1000 Persons",
caption = "#DuboisChallenge"
) +
theme_enhance_waffle()
ggplot(enslaved_df, aes(values = value/10000, fill=type)) +
geom_waffle(color= "#d2b48c",size = .5, n_rows=10, flip=TRUE, show.legend=FALSE) +
facet_wrap(~year, nrow=1,strip.position = "bottom") +
scale_fill_manual(
name= NULL,
values = c("#00aa00","#000000"),
labels = c("Enslaved","Freed")
) +
scale_y_discrete(expand = c(0,0)) +
coord_equal()+
labs(
title = "Proportion of Freed and Persons Among Blacks in the USA",
subtitle = glue(
"Each Square Represents 10,000 Person That Are "
), fill = "Each Square Represents 1000 Persons",
caption = "#DuboisChallenge"
) +
theme_enhance_waffle() +
theme(
text = element_text(family = "Oswald",size=12),
plot.title = element_text(face="bold"),
plot.subtitle = ggtext::element_markdown(),
plot.title.position = "panel",
legend.position = "top",
plot.background = element_rect(fill = "#d2b48c", color="#d2b48c"),
strip.background = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill= "#d2b48c",color='#d2b58c')
)
library(gganimate)
library(ggplot2)
install.packages("gganimate")
library(gganimate)
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
plot(p)
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length, color=Species)) +
geom_point()
plot(p)
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim
anim
install.packages("gifski")
install.packages("png")
anim
install.packages(c("coda","mvtnorm","devtools","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
l
cl
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
library(dplyr)
text_df <- tibble(line = 1:4, text = text)
text_df
text_df %>%
unnest_tokens(word,text)
library(tidytext)
install.packages("tidytext")
library(tidytext)
text_df <- tibble(line = 1:4, text = text)
text_df
text_df %>%
unnest_tokens(word,text)
str(text_df)
install.packages("janeaustenr")
install.packages("janeaustenr")
install.packages("shiny")
install.packages("shiny")
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output,session){
}
shinyApp(ui, server)
install.packages("topicmodels")
library(topicmodels)
data("AssociatedPress")
library(topicmodels)
data("AssociatedPress")
AssociatedPress
ap_lda <- LDA(AssociatedPress, k =2, control =list(seed = 1234))
ap_lda
ap_topics <- tidy(ap_lda, matrix = "beta")
ap_topics <- tidy(ap_lda, matrix = "beta")
install.packages("tidy")
install.packages("tidytext")
library(tidytext)
library(tidytext)
ap_topics <- tidy(ap_lda, matrix = "beta")
library(topicmodels)
library(tidytext)
library(tidyverse)
data("AssociatedPress")
AssociatedPress
ap_lda <- LDA(AssociatedPress, k =2, control =list(seed = 1234))
ap_lda
ap_topics <- tidy(ap_lda, matrix = "beta")
ap_topics
install.packages("reshape2")
ap_topics <- tidy(ap_lda, matrix = "beta")
ap_topics
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
slice_max(beta, n =10)
ap_top_terms
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
slice_max(beta, n =10) %>%
ungroup()
ap_top_terms
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
slice_max(beta, n =10) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms
ap_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(beta, term, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") +
scale_y_reordered()
ap_documents <- tidy(ap_lda, matrix = "gamma")
ap_documents
tidy(AssociatedPress) %>%
filter(document == 6) %>%
arrange(desc(count))
titles <- c("Twenty Thousand Leagues under the Sea",
"The War of the Worlds",
"Pride and Prejudice",
"Great Expectations")
library(gutenbergr)
books <- gutenberg_works(title %in% titles) %>%
gutenberg_download(meta_fields = "title")
install.packages("gutenbergr")
library(gutenbergr)
books <- gutenberg_works(title %in% titles) %>%
gutenberg_download(meta_fields = "title")
library(stringr)
by_chapter <- books %>%
group_by(title) %>%
mutate(chapter = cumsum(str_detect(
text, regex("^chapter ", ignore_case = TRUE)
))) %>%
ungroup() %>%
filter(chapter > 0) %>%
unite(document, title, chapter)
# split into words
by_chapter_word <- by_chapter %>%
unnest_tokens(word, text)
# find document-word counts
word_counts <- by_chapter_word %>%
anti_join(stop_words) %>%
count(document, word, sort = TRUE) %>%
ungroup()
word_counts
chapters_dtm <- word_counts %>%
cast_dtm(document, word, n)
chapters_dtm
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/svg/svg.R', echo=TRUE)
setwd("C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3")
setwd("C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/svg")
library(r2d3)
#svg is automatically loaded with the package
#The svg container for the visualization
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "svg.js")
library(r2d3)
#svg is automatically loaded with the package
#The svg container for the visualization
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "svg.js")
library(r2d3)
#svg is automatically loaded with the package
#The svg container for the visualization
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "svg.js")
library(r2d3)
#svg is automatically loaded with the package
#The svg container for the visualization
r2d3(data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20), script = "svg.js")
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/barchart/barchart-csv.R', echo=TRUE)
setwd("C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/barchart")
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/barchart/barchart-csv.R', echo=TRUE)
setwd("C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter")
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
#setwd("../Desktop/rDemo")
library("jsonlite")
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
source('C:/Users/mutiu/Desktop/project/rPractice/rdemo_r2d3/scatter/scatter-plot.R', echo=TRUE)
